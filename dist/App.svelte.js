/* src/App.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	bubble,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	set_input_value,
	space
} from "../snowpack/pkg/svelte/internal.js";

import copy from "../snowpack/pkg/copy-text-to-clipboard.js";

function create_if_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");

			button.innerHTML = `<svg class="h-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0
          002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path></svg>`;

			attr(button, "type", "button w-full");
			attr(button, "class", "inline-flex items-center p-1 text-sm font-medium text-gray-700 bg-transparent rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-offset-2 focus:ring-indigo-500 focus:ring-2");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[11]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let main;
	let section;
	let form;
	let div1;
	let label0;
	let t0;
	let div0;
	let input0;
	let t1;
	let div5;
	let div2;
	let label1;
	let t3;
	let input1;
	let t4;
	let div3;
	let label2;
	let t6;
	let input2;
	let t7;
	let div4;
	let label3;
	let t9;
	let input3;
	let t10;
	let textarea;
	let t11;
	let mounted;
	let dispose;
	let if_block = /*builtURL*/ ctx[4].length && create_if_block(ctx);

	return {
		c() {
			main = element("main");
			section = element("section");
			form = element("form");
			div1 = element("div");
			label0 = element("label");

			label0.innerHTML = `<svg class="w-5 h-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0
              00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0
              101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0
              00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5
              1.5a2 2 0 11-2.828-2.828l3-3z" clip-rule="evenodd"></path></svg>`;

			t0 = space();
			div0 = element("div");
			input0 = element("input");
			t1 = space();
			div5 = element("div");
			div2 = element("div");
			label1 = element("label");
			label1.textContent = "Campaign";
			t3 = space();
			input1 = element("input");
			t4 = space();
			div3 = element("div");
			label2 = element("label");
			label2.textContent = "Source";
			t6 = space();
			input2 = element("input");
			t7 = space();
			div4 = element("div");
			label3 = element("label");
			label3.textContent = "Medium";
			t9 = space();
			input3 = element("input");
			t10 = space();
			textarea = element("textarea");
			t11 = space();
			if (if_block) if_block.c();
			attr(label0, "for", "company_website");
			attr(label0, "class", "inline-flex items-center px-3 px-4 py-2 text-sm text-gray-500 border border-r-0 border-gray-300 rounded-l-md bg-gray-50");
			attr(input0, "autocomplete", "on");
			attr(input0, "name", "url");
			attr(input0, "class", "flex-1 block w-full px-4 py-2 text-gray-600 border border-gray-300 rounded-none outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 rounded-r-md sm:text-sm");
			attr(input0, "placeholder", blogURL);
			attr(div0, "class", "flex w-full rounded-md shadow-sm");
			attr(div1, "class", "flex mb-5");
			attr(label1, "class", "ml-1 font-semibold text-gray-500");
			attr(label1, "title", "Required: Black Friday, Cyber Monday, ...");
			attr(label1, "for", "campaign");
			attr(input1, "autocomplete", "on");
			attr(input1, "name", "campaign");
			attr(input1, "id", "campaign");
			attr(input1, "class", "w-full px-4 py-2 text-gray-600 border border-gray-300 rounded-md outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm");
			attr(input1, "placeholder", "Campaign");
			attr(label2, "class", "ml-1 font-semibold text-gray-500");
			attr(label2, "title", "Required: Black Friday, Cyber Monday, ...");
			attr(label2, "for", "source");
			attr(input2, "autocomplete", "on");
			attr(input2, "name", "source");
			attr(input2, "id", "source");
			attr(input2, "class", "w-full px-4 py-2 text-gray-600 border border-gray-300 rounded-md outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm");
			attr(input2, "placeholder", "Source");
			attr(label3, "class", "ml-1 font-semibold text-gray-500");
			attr(label3, "title", "Required: Black Friday, Cyber Monday, ...");
			attr(label3, "for", "medium");
			attr(input3, "autocomplete", "on");
			attr(input3, "name", "medium");
			attr(input3, "id", "medium");
			attr(input3, "class", "w-full px-4 py-2 text-gray-600 border border-gray-300 rounded-md outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm");
			attr(input3, "placeholder", "Medium");
			attr(div5, "class", "grid grid-cols-3 gap-4");
			attr(form, "class", "relative flex flex-col justify-between inline-block mb-6 text-left");
			attr(textarea, "class", "w-full p-2 text-center text-gray-400 rounded-md outline-none resize-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500");
			attr(textarea, "id", "story");
			attr(textarea, "name", "story");
			attr(textarea, "rows", "3");
			attr(textarea, "placeholder", "https://www.plausible.io?utm_campaign=Campaign&utm_source=Source&utm_medium=Medium");
			textarea.value = /*builtURL*/ ctx[4];
			attr(section, "class", "relative p-8 mb-6 bg-white rounded-lg shadow-xl h-fixed");
			attr(main, "class", "w-11/12 xs:w-10/12 sm:w-9/12 md:w-8/12 lg:w-7/12 xl:w-6/12 2xl:2-5/12");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, section);
			append(section, form);
			append(form, div1);
			append(div1, label0);
			append(div1, t0);
			append(div1, div0);
			append(div0, input0);
			set_input_value(input0, /*url*/ ctx[0]);
			append(form, t1);
			append(form, div5);
			append(div5, div2);
			append(div2, label1);
			append(div2, t3);
			append(div2, input1);
			set_input_value(input1, /*campaign*/ ctx[1]);
			append(div5, t4);
			append(div5, div3);
			append(div3, label2);
			append(div3, t6);
			append(div3, input2);
			set_input_value(input2, /*source*/ ctx[2]);
			append(div5, t7);
			append(div5, div4);
			append(div4, label3);
			append(div4, t9);
			append(div4, input3);
			set_input_value(input3, /*medium*/ ctx[3]);
			append(section, t10);
			append(section, textarea);
			append(section, t11);
			if (if_block) if_block.m(section, null);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[7]),
					listen(input1, "input", /*input1_input_handler*/ ctx[8]),
					listen(input2, "input", /*input2_input_handler*/ ctx[9]),
					listen(input3, "input", /*input3_input_handler*/ ctx[10]),
					listen(form, "submit", prevent_default(/*submit_handler*/ ctx[6]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*url*/ 1 && input0.value !== /*url*/ ctx[0]) {
				set_input_value(input0, /*url*/ ctx[0]);
			}

			if (dirty & /*campaign*/ 2 && input1.value !== /*campaign*/ ctx[1]) {
				set_input_value(input1, /*campaign*/ ctx[1]);
			}

			if (dirty & /*source*/ 4 && input2.value !== /*source*/ ctx[2]) {
				set_input_value(input2, /*source*/ ctx[2]);
			}

			if (dirty & /*medium*/ 8 && input3.value !== /*medium*/ ctx[3]) {
				set_input_value(input3, /*medium*/ ctx[3]);
			}

			if (dirty & /*builtURL*/ 16) {
				textarea.value = /*builtURL*/ ctx[4];
			}

			if (/*builtURL*/ ctx[4].length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(section, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(main);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

const blogURL = "https://www.plausible.io";

function instance($$self, $$props, $$invalidate) {
	let url, campaign, source, medium, builtURL;
	url = campaign = source = medium = builtURL = "";

	const copyURL = () => {
		copy(encodeURI(builtURL));

		iziToast.success({
			title: "OK",
			message: "Copied to Clipboard!",
			position: "bottomCenter"
		});
	};

	function submit_handler(event) {
		bubble($$self, event);
	}

	function input0_input_handler() {
		url = this.value;
		$$invalidate(0, url);
	}

	function input1_input_handler() {
		campaign = this.value;
		$$invalidate(1, campaign);
	}

	function input2_input_handler() {
		source = this.value;
		$$invalidate(2, source);
	}

	function input3_input_handler() {
		medium = this.value;
		$$invalidate(3, medium);
	}

	const click_handler = () => copyURL();

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*url, campaign, source, medium*/ 15) {
			$: {
				let tmp = url, arr = [];

				if (campaign || source || medium) {
					tmp += `?`;
				}

				if (campaign) {
					arr.push(`utm_campaign=${campaign}`);
				}

				if (source) {
					arr.push(`utm_source=${source}`);
				}

				if (medium) {
					arr.push(`utm_medium=${medium}`);
				}

				$$invalidate(4, builtURL = tmp + arr.join("&"));
			}
		}
	};

	return [
		url,
		campaign,
		source,
		medium,
		builtURL,
		copyURL,
		submit_handler,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		input3_input_handler,
		click_handler
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;